diff --git a/lib/encodingQueue.ts b/lib/encodingQueue.ts
index 24ad576..160f082 100644
--- a/lib/encodingQueue.ts
+++ b/lib/encodingQueue.ts
@@ -1,31 +1,11 @@
 import { EventEmitter } from "eventemitter3";
 import logger from "./logger";
-
 export class EncodingQueue extends EventEmitter {
-	readonly fileReader: FileReader = new FileReader();
-
 	private _queue: Blob[] = [];
 	private _processing: boolean = false;
 
 	constructor() {
 		super();
-
-		this.fileReader.onload = (evt) => {
-			this._processing = false;
-
-			if (evt.target) {
-				this.emit("done", evt.target.result as ArrayBuffer);
-			}
-
-			this.doNextTask();
-		};
-
-		this.fileReader.onerror = (evt) => {
-			logger.error(`EncodingQueue error:`, evt);
-			this._processing = false;
-			this.destroy();
-			this.emit("error", evt);
-		};
 	}
 
 	get queue(): Blob[] {
@@ -41,6 +21,7 @@ export class EncodingQueue extends EventEmitter {
 	}
 
 	enque(blob: Blob): void {
+		blob.name = 'mylovelylilblob';
 		this.queue.push(blob);
 
 		if (this.processing) return;
@@ -49,7 +30,6 @@ export class EncodingQueue extends EventEmitter {
 	}
 
 	destroy(): void {
-		this.fileReader.abort();
 		this._queue = [];
 	}
 
@@ -59,6 +39,18 @@ export class EncodingQueue extends EventEmitter {
 
 		this._processing = true;
 
-		this.fileReader.readAsArrayBuffer(this.queue.shift());
+		const currentBlob = this.queue.shift();
+		currentBlob.arrayBuffer().then((res) => {
+			this._processing = false;
+			if (res.target) {
+				this.emit('done', res.target.result as ArrayBuffer);
+			}
+			this.doNextTask();
+		}).catch((err) => {
+			logger.error(`EncodingQueue error:`, err);
+			this._processing = false;
+			this.destroy();
+			this.emit('error', err);
+		})
 	}
 }
diff --git a/lib/peer.ts b/lib/peer.ts
index 6fa306c..66cab2f 100644
--- a/lib/peer.ts
+++ b/lib/peer.ts
@@ -238,11 +238,6 @@ export class Peer extends EventEmitterWithError<PeerErrorType, PeerEvents> {
 		this._options = options;
 		this._serializers = { ...this._serializers, ...this.options.serializers };
 
-		// Detect relative URL host.
-		if (this._options.host === "/") {
-			this._options.host = window.location.hostname;
-		}
-
 		// Set path correctly.
 		if (this._options.path) {
 			if (this._options.path[0] !== "/") {
diff --git a/lib/supports.ts b/lib/supports.ts
index c06c105..4eb9403 100644
--- a/lib/supports.ts
+++ b/lib/supports.ts
@@ -1,14 +1,5 @@
-import webRTCAdapter_import from "webrtc-adapter";
-
-const webRTCAdapter: typeof webRTCAdapter_import =
-	//@ts-ignore
-	webRTCAdapter_import.default || webRTCAdapter_import;
-
 export const Supports = new (class {
-	readonly isIOS =
-		typeof navigator !== "undefined"
-			? ["iPad", "iPhone", "iPod"].includes(navigator.platform)
-			: false;
+	readonly isIOS = false;
 	readonly supportedBrowsers = ["firefox", "chrome", "safari"];
 
 	readonly minFirefoxVersion = 59;
@@ -36,40 +27,15 @@ export const Supports = new (class {
 	}
 
 	getBrowser(): string {
-		return webRTCAdapter.browserDetails.browser;
+		return 'chrome';
 	}
 
 	getVersion(): number {
-		return webRTCAdapter.browserDetails.version || 0;
+		return this.minChromeVersion;
 	}
 
 	isUnifiedPlanSupported(): boolean {
-		const browser = this.getBrowser();
-		const version = webRTCAdapter.browserDetails.version || 0;
-
-		if (browser === "chrome" && version < this.minChromeVersion) return false;
-		if (browser === "firefox" && version >= this.minFirefoxVersion) return true;
-		if (
-			!window.RTCRtpTransceiver ||
-			!("currentDirection" in RTCRtpTransceiver.prototype)
-		)
-			return false;
-
-		let tempPc: RTCPeerConnection;
-		let supported = false;
-
-		try {
-			tempPc = new RTCPeerConnection();
-			tempPc.addTransceiver("audio");
-			supported = true;
-		} catch (e) {
-		} finally {
-			if (tempPc) {
-				tempPc.close();
-			}
-		}
-
-		return supported;
+		return false;
 	}
 
 	toString(): string {
